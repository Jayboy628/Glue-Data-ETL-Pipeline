AWSTemplateFormatVersion: '2010-09-09'
Description: Step Function for NH ETL Pipeline with Validator Lambda

Parameters:
  ProjectPrefix:
    Type: String
    Default: nh
  Environment:
    Type: String
    Default: dev

Resources:

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectPrefix}-stepfn-exec-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowLambdaAndGlueAndLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                  - lambda:ListFunctions
                  - glue:StartJobRun
                  - glue:GetJob
                  - glue:GetJobRun
                  - glue:GetJobRuns
                  - glue:GetJobBookmark
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"



  NHPipelineStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${ProjectPrefix}-etl-pipeline-${Environment}"
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "NH ETL Pipeline",
          "StartAt": "SyncDriveToS3",
          "States": {
            "SyncDriveToS3": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProjectPrefix}-sync-drive-${Environment}",
                "Payload": {}
              },
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "FailSyncDrive"
                }
              ],
              "Next": "UniversalCleaningJob"
            },
            "FailSyncDrive": {
              "Type": "Fail",
              "Error": "SyncDriveFailed",
              "Cause": "SyncDrive Lambda failed"
            },
            "UniversalCleaningJob": {
              "Type": "Task",
              "Resource": "arn:aws:states:::glue:startJobRun.sync",
              "Parameters": {
                "JobName": "${ProjectPrefix}-etl-universal-cleaning-${Environment}"
              },
              "ResultPath": "$.UniversalCleaningResult",
              "TimeoutSeconds": 1200,
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "FailUniversalCleaning"
                }
              ],
              "Next": "WaitForCleaning"
            },
            "FailUniversalCleaning": {
              "Type": "Fail",
              "Error": "CleaningFailed",
              "Cause": "Universal cleaning job failed"
            },
            "WaitForCleaning": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "MoveSourceFiles"
            },
            "MoveSourceFiles": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProjectPrefix}-move-sources-files-${Environment}",
                "Payload": {}
              },
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "FailMoveFiles"
                }
              ],
              "Next": "ValidateStagingFiles"
            },
            "FailMoveFiles": {
              "Type": "Fail",
              "Error": "MoveFilesFailed",
              "Cause": "Failed to move staged files"
            },
            "ValidateStagingFiles": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProjectPrefix}-validate-staging-${Environment}",
                "Payload": {}
              },
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "FailValidation"
                }
              ],
              "Next": "TransformInParallel"
            },
            "FailValidation": {
              "Type": "Fail",
              "Error": "ValidationFailed",
              "Cause": "Staging validation Lambda failed"
            },
            "TransformInParallel": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "ProviderTransformJob",
                  "States": {
                    "ProviderTransformJob": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::glue:startJobRun.sync",
                      "Parameters": {
                        "JobName": "${ProjectPrefix}-etl-provider-transform-${Environment}"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "QualityTransformJob",
                  "States": {
                    "QualityTransformJob": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::glue:startJobRun.sync",
                      "Parameters": {
                        "JobName": "${ProjectPrefix}-etl-quality-transform-${Environment}"
                      },
                      "End": true
                    }
                  }
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "FailAll"
                }
              ],
              "Next": "Success"
            },
            "Success": {
              "Type": "Succeed"
            },
            "FailAll": {
              "Type": "Fail",
              "Error": "JobFailure",
              "Cause": "One or more parallel ETL jobs failed"
            }
          }
        }

Outputs:
  StepFunctionArn:
    Description: "ARN of the Step Function state machine"
    Value: !Ref NHPipelineStateMachine
    Export:
      Name: nh-stepfn-arn